AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
 This "{{.ProjectName}}" SAM stack is a Gothic App. You can extend the infrastructure as code by adding additional resources directly to the template file.

Globals:
  Function:
    Timeout: {{.Timeout}}
    MemorySize: {{.MemorySize}}

Parameters:
  Stage:
    Description: "Pass your Stage to get parameters from SSM"
    Type: String
    Default: default

Mappings:
  StagesMap:
    # Auto-generated code during deployment. Do not modify this section directly.
    # To make changes, update the values in gothic-config.json instead.
    {{.StageTemplateInfo.Name}}:
      {{.StageTemplateInfo.BucketName}}
      {{.StageTemplateInfo.LambdaName}}
      {{- if or .StageTemplateInfo.IsCustomDomain .StageTemplateInfo.IsCustomDomainWithArn }}
      {{.StageTemplateInfo.CustomDomain}}
      {{.StageTemplateInfo.HostedZone}}
      {{- end }}
      {{- if .StageTemplateInfo.IsCustomDomainWithArn }}
      {{.StageTemplateInfo.CertificateArn}}
      {{- end }}
      {{- range .StageTemplateInfo.Env }}
      "{{ .Key }}": {{ .Value }}
      {{- end }}
      HttpServerPort: ":8080"

Conditions:
  IsUSEast1: !Equals [ !Ref "AWS::Region", "us-east-1" ]

Resources:
  GothServer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [StagesMap, !Ref Stage, LambdaName]
      PackageType: Image
      Architectures:
        - x86_64
      Environment:
        Variables:
          # Auto-generated code during deployment. Do not modify this section directly.
          # To make changes, update the values in gothic-config.json instead.
          HTTP_LISTEN_ADDR: !FindInMap [StagesMap, !Ref Stage, HttpServerPort]
          {{- range .StageTemplateInfo.Env }}
          "{{ .Key }}": !FindInMap [StagesMap, !Ref Stage, "{{ .Key }}"]
          {{- end }}
      FunctionUrlConfig:
        AuthType: AWS_IAM
    Metadata:
      DockerTag: provided
      DockerContext: ./
      Dockerfile: Dockerfile

{{- if .StageTemplateInfo.IsCustomDomain }}
  AppCustomCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !FindInMap [StagesMap, !Ref Stage, customDomain]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !FindInMap [StagesMap, !Ref Stage, customDomain]
          HostedZoneId: !FindInMap [StagesMap, !Ref Stage, hostedZoneId]
      SubjectAlternativeNames:
        - !FindInMap [StagesMap, !Ref Stage, customDomain]
{{- end }}

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    {{- if .StageTemplateInfo.IsCustomDomain }}
    DependsOn: AppCustomCertificate
    {{- end }}
    Properties:
      DistributionConfig:
        CacheBehaviors:
          - PathPattern: "/public/*"
            TargetOriginId: publicAssets
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachePolicyId: !Ref PublicAssetsCachingPolicy

        Origins:
          - DomainName: !If
              - IsUSEast1
              - !GetAtt Bucket.DomainName
              - !Join ["", [!FindInMap [StagesMap, !Ref Stage, BucketName], ".s3.", !Ref "AWS::Region", ".amazonaws.com"]]
            Id: publicAssets
            OriginAccessControlId: !Ref BucketFrontOriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ""
          - DomainName:
              !Select [2, !Split ["/", !GetAtt GothServerUrl.FunctionUrl]]
            Id: ServerRoutes
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
              OriginKeepaliveTimeout: 60
            OriginAccessControlId: !Ref ServerCloudFrontOriginAccessControl
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: ServerRoutes
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachePolicyId: !Ref ServerCachingDisabledPolicy
          ForwardedValues:
            QueryString: true
        ViewerCertificate:
          {{- if .StageTemplateInfo.IsCustomDomain }}
          AcmCertificateArn: !Ref AppCustomCertificate
          SslSupportMethod: sni-only
          {{- else if .StageTemplateInfo.IsCustomDomainWithArn }}
          AcmCertificateArn: !FindInMap [StagesMap, !Ref Stage, certificateArn]
          SslSupportMethod: sni-only
          {{- else }}
          CloudFrontDefaultCertificate: true
          {{- end }}
          MinimumProtocolVersion: TLSv1.2_2021
        {{- if or .StageTemplateInfo.IsCustomDomain .StageTemplateInfo.IsCustomDomainWithArn }}
        Aliases:
          - !FindInMap [StagesMap, !Ref Stage, customDomain]
        {{- end }}
        HttpVersion: http2
        PriceClass: PriceClass_All

{{- if or .StageTemplateInfo.IsCustomDomain .StageTemplateInfo.IsCustomDomainWithArn }}
  CustomDomainRoute53RecordSet:
    DependsOn: CloudFrontDistribution
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !FindInMap [StagesMap, !Ref Stage, hostedZoneId]
      Name: !FindInMap [StagesMap, !Ref Stage, customDomain]
      Type: A
      Region: us-east-1
      SetIdentifier: !Sub "${AWS::StackName}-custom-domain-record"
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2"
{{- end }}

  ServerLambdaInvokePermissionForCloudFront:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GothServer
      Action: lambda:InvokeFunctionUrl
      Principal: "cloudfront.amazonaws.com"
      SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
      SourceAccount: !Sub "${AWS::AccountId}"

  ServerCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-oac-for-goth-server"
        SigningBehavior: always
        OriginAccessControlOriginType: lambda
        SigningProtocol: sigv4

  BucketFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-oac-for-goth-bucket"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  ServerCachingDisabledPolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub "${AWS::StackName}-cache-policy"
        DefaultTTL: 0
        MaxTTL: 31536000
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          CookiesConfig:
            CookieBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  PublicAssetsCachingPolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub "${AWS::StackName}-bucket-cache-policy"
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap [StagesMap, !Ref Stage, BucketName]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Action:
              - "s3:GetObject"
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Resource: !Sub "${Bucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution.Id}"

Outputs:
  CloudFrontDomainName:
    Description: "The CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
  GothServerLambdaURL:
    Description: "Lambda function url to access server"
    Value: !GetAtt GothServerUrl.FunctionUrl
  CloudFrontId:
    Description: "The CloudFront Distribution Id"
    Value: !Ref CloudFrontDistribution
  {{- if or .StageTemplateInfo.IsCustomDomain .StageTemplateInfo.IsCustomDomainWithArn }}
  CloudFrontCustomDomainName:
    Description: "The custom domain mapped to CloudFront"
    Value: !FindInMap [StagesMap, !Ref Stage, customDomain]
  {{- end }}
