package components


import (
	routes "github.com/felipegenef/gothic-cli/pkg/helpers/routes"
    "net/http"
)

type {{.ComponentName}}Props = struct{
 IsFirstLoad bool
 ImgName string
 ImgExtension string
 Alt string
}

var {{.ComponentName}}Config = routes.RouteConfig[{{.ComponentName}}Props]{
	Type: routes.STATIC,
	HttpMethod: routes.GET,
	Middleware: func(w http.ResponseWriter, r *http.Request) {{.ComponentName}}Props {
		return {{.ComponentName}}Props{
			IsFirstLoad: true,
			ImgName: "",
			ImgExtension: "",
			Alt: "",
		}
	},
}


/**
	*                           Image Optimization
	*
	* This is how you optimize your SEO with lazy loading images
    * similar to what Next.js does with the Image Component.
    * To make this work we first load the same image with lower
    * resolution and after the page loads we fetch the original image
    * with the same fixed length, given the user the impression that
    * the page loaded faster.
    * From the user's perspective the image will be blurred at first
    * then it will appear with full resolution in a smoth and almost
    * inperceptive transition.
    *
	*
*/

templ {{.ComponentName}}(componentProps {{.ComponentName}}Props) {
	if componentProps.IsFirstLoad {
		<img alt={ componentProps.Alt } class={ "w-full h-full" } hx-trigger="load" hx-swap="outerHTML" hx-get={ "/optimizedImage/" + componentProps.ImgName + "/" + componentProps.ImgExtension + "/" + componentProps.Alt } src={ "/public/" + componentProps.ImgName + "/blurred." + componentProps.ImgExtension }/>
	} else {
		<img alt={ componentProps.Alt } class={ "w-full h-full" } src={ "/public/" + componentProps.ImgName + "/original." + componentProps.ImgExtension }/>
	}
}
