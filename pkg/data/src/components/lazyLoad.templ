package components

import (
	  routes "github.com/felipegenef/gothicframework/pkg/helpers/routes"
	  "net/http"
)

/**
 * `LazyLoadProps` defines the props passed to the `LazyLoad` component.
 *
 * It is a simple boolean value:
 * - `true` indicates the initial (placeholder) render — usually triggered from a full page render.
 * - `false` indicates the second load — when HTMX fetches the full content.
 */
type LazyLoadProps = bool

/**
 * `LazyLoadConfig` sets up a static route for the lazy-loaded component.
 *
 * - `Type`: Set to `STATIC` so responses can be cached by CDNs like CloudFront.
 * - `HttpMethod`: Uses `GET`, which aligns with HTMX's default behavior for fetching content.
 * - `Middleware`: In this case, always returns `false` — because it is only called via HTMX
 *   after the initial placeholder render, meaning this is *not* the first load.
 *
 * Note: The first render with `true` should be triggered from a parent component or page.
 */
var LazyLoadConfig = routes.RouteConfig[LazyLoadProps]{
	Type:       routes.STATIC,
	HttpMethod: routes.GET,
	Middleware: func(w http.ResponseWriter, r *http.Request) LazyLoadProps {
		// HTMX-triggered follow-up calls always treat this as a non-initial render
		return false
	},
}

/**
 *                         ⚡ Component Lazy Loading
 *
 * `LazyLoad` is a reusable pattern for lazy-loading components to improve performance
 * and SEO by reducing initial page size and deferring content until it’s needed.
 *
 * How it works:
 * - When `isFirstLoad` is `true` (set by the parent page/component):
 *   - Renders a skeleton or placeholder.
 *   - Uses `hx-get` to trigger an HTMX request for the actual component.
 *   - When the request completes, the placeholder is swapped with the real content.
 *
 * - When `isFirstLoad` is `false` (HTMX has loaded the route):
 *   - The actual content is rendered directly.
 *
 * Tip: Use this component to load large or non-critical UI parts *after* the initial page render.
 */
templ LazyLoad(isFirstLoad LazyLoadProps) {
	if isFirstLoad {
		<div hx-get="/yourLazyLoadedComponent" hx-trigger="load" hx-swap="outerHTML">
			<div>Put your skeleton loader or placeholder here for `/yourLazyLoadedComponent`</div>
		</div>
	} else {
		<div>This is the actual content loaded after the placeholder</div>
	}
}