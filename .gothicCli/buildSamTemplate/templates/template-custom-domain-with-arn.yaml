AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  gothic-example

  Sample SAM Template for gothic-cli

Globals:
  Function:
    Timeout: timeoutReplacerString
    MemorySize: memoryReplacerString

Parameters:
  Stage:
    Description: "Pass your Stage to get parameters from SSM"
    Type: String
    Default: default

Mappings:
  StagesMap:
    stageReplacerString:
      bucketNameReplacerString
      lambdaNameReplacerString
      customDomainReplacerString
      hostedZoneReplacerString
      certificateArnReplacerString
      HttpServerPort: ":8080" # If changing this port Lambda Web adapter will not work unless you change the env variable PORT
stageMapStringReplacer


# This was added for multi region lambda server support. Check out CloudFrontDistribution Origins to see.
# In case the stack region is different than us-eas-1 we need to build the origin url (Cloudfront bug set it as us-east-1 always)
Conditions:
  IsUSEast1: !Equals [ !Ref "AWS::Region", "us-east-1" ]


Resources:
  GothServer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !FindInMap [StagesMap, !Ref Stage, LambdaName]
      PackageType: Image
      Architectures:
        - x86_64
      Environment:
        Variables:
          HTTP_LISTEN_ADDR: !FindInMap [StagesMap, !Ref Stage, HttpServerPort] ## Labda WEB adapters use port 8080 by default.
EnvStringReplacer
      FunctionUrlConfig:
        AuthType: AWS_IAM
    Metadata:
      DockerTag: provided
      DockerContext: ./
      Dockerfile: Dockerfile

  # CloudFront Distribution with Lambda function URL as the origin with Origin and Behaviors configuration
  # following best practices for a Lambda function URL origin.
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CacheBehaviors:
          - PathPattern: "/public/*"
            TargetOriginId: publicAssets
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachePolicyId: !Ref PublicAssetsCachingPolicy

        Origins:
          - DomainName: !If
              - IsUSEast1
              - !GetAtt Bucket.DomainName
              - !Join
                  - ""
                  - - !FindInMap [StagesMap, !Ref Stage, BucketName]
                    - ".s3."
                    - !Ref "AWS::Region"
                    - ".amazonaws.com"
            Id: publicAssets
            OriginAccessControlId: !Ref BucketFrontOriginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: ""
          - DomainName:
              !Select [2, !Split ["/", !GetAtt GothServerUrl.FunctionUrl]]
            Id: ServerRoutes
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
              OriginKeepaliveTimeout: 60
            OriginAccessControlId: !Ref ServerCloudFrontOriginAccessControl
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: ServerRoutes
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachePolicyId: !Ref ServerCachingDisabledPolicy
          ForwardedValues:
            QueryString: true
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.2_2021
          AcmCertificateArn: !FindInMap [StagesMap, !Ref Stage, certificateArn]
          SslSupportMethod: sni-only
        Aliases:
          - !FindInMap [StagesMap, !Ref Stage, customDomain]
        HttpVersion: http2
        PriceClass: PriceClass_All
  CustomDomainRoute53RecordSet:
    DependsOn: CloudFrontDistribution
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !FindInMap [StagesMap, !Ref Stage, hostedZoneId]
      Name: !FindInMap [StagesMap, !Ref Stage, customDomain]
      Type: A
      Region: us-east-1
      SetIdentifier: !Sub "${AWS::StackName}-custom-domain-record"
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: "Z2FDTNDATAQYW2" # Mocked value for all cloudfront apis besides china (Z3RFFRIM2A3IF5)

  # Permission to invoke the Lambda function from the CloudFront Distrinbution
  ServerLambdaInvokePermissionForCloudFront:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GothServer
      Action: lambda:InvokeFunctionUrl
      Principal: "cloudfront.amazonaws.com"
      SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
      SourceAccount: !Sub "${AWS::AccountId}"

  # Origin Access Control to associate with the CloudFront Distribution
  ServerCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-oac-for-goth-server"
        SigningBehavior: always
        OriginAccessControlOriginType: lambda
        SigningProtocol: sigv4
  BucketFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-oac-for-goth-bucket"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  # Recommended cache policy to disable caching for the Lambda function URL origin
  ServerCachingDisabledPolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub "${AWS::StackName}-cache-policy"
        DefaultTTL: 0
        MaxTTL: 31536000
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          CookiesConfig:
            CookieBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
  PublicAssetsCachingPolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub "${AWS::StackName}-bucket-cache-policy"
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none
  # Public Folder Bucket
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !FindInMap [StagesMap, !Ref Stage, BucketName]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  # Creates a bucket policy giving OAC read-only access to the S3 bucket.
  # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Action:
              - "s3:GetObject"
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Resource: !Sub "${Bucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution.Id}"

Outputs:
  CloudFrontDomainName:
    Description: "The CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
  GothServerLambdaURL:
    Description: "Lambda function url to access server"
    Value: !GetAtt GothServerUrl.FunctionUrl
  CloudFrontCustomDomainName:
    Description: "The CloudFront Distribution Domain Name"
    Value: !FindInMap [ StagesMap, !Ref Stage, customDomain ]
  CloudFrontId:
    Description: "The CloudFront Distribution Id"
    Value: !Ref CloudFrontDistribution